Collections in Java
---------------

Framework that provides an architecture to store and manipulate the group of objects.
All the operations that you perform on data such as searching, sorting, insertion, manipulation, deletion etc. can be performed by Java Collections.

Iterator Interface
----------------
public boolean hasNext()- It returns true if iterator has more elements	

public Object next()- It returns the element and moves the cursor pointer to the next element.
	

public void remove()- It removes the last elements returned by the iterator. It is rarely used.


==========================
ArrayList Class
------------

Java ArrayList class uses a dynamic array for storing the elements. 



Java ArrayList class can contain duplicate elements.
Java ArrayList class maintains insertion order.
Java ArrayList class is non synchronized.
Java ArrayList allows random access because array works at the index basis.
Manipulation is slow because a lot of shifting needs to be occurred if any element is removed from the array list.


Constructors of Java ArrayList
------------------------------
ArrayList()	It is used to build an empty array list.
ArrayList(Collection c)	It is used to build an array list that is initialized with the elements of the collection c.
ArrayList(int capacity)	It is used to build an array list that has the specified initial capacity.

ArrayList<String> al=new ArrayList<String>();//creating new generic arraylist 

-----------------------------
Two ways to iterate the elements of collection in java
There are two ways to traverse collection elements:

By Iterator interface.
By for-each loop.
----------------------------------------
LinkedList class
=================

Java LinkedList class uses doubly linked list to store the elements. It provides a linked-list data structure.
The important points about Java LinkedList are:

Java LinkedList class can contain duplicate elements.
Java LinkedList class maintains insertion order.
Java LinkedList class is non synchronized.
In Java LinkedList class, manipulation is fast because no shifting needs to be occurred.
Java LinkedList class can be used as list, stack or queue
----------------------------

Java ListIterator Interface
============================
ListIterator Interface is used to traverse the element in backward and forward direction.


boolean hasNext()	This method return true if the list iterator has more elements when traversing the list in the forward direction.
Object next()	This method return the next element in the list and advances the cursor position.
boolean hasPrevious()	This method return true if this list iterator has more elements when traversing the list in the reverse direction.
Object previous()	This method return the previous element in the list and moves the cursor position backwards.
------------------------------------------------------------------
Java HashSet class
==================
Java HashSet class hierarchy
Java HashSet class is used to create a collection that uses a hash table for storage.
 It inherits the AbstractSet class and implements Set interface.



HashSet stores the elements by using a mechanism called hashing.
HashSet contains unique elements only.
==========================================

Java LinkedHashSet class
=======================
Java HashSet class hierarchy
Java LinkedHashSet class is a Hash table and Linked list implementation of the set interface

The important points about Java LinkedHashSet class are:

Contains unique elements only like HashSet.
Provides all optional set operations, and permits null elements.
Maintains insertion order.

=========================

Java TreeSet class
==================
TreeSet class hierarchy
Java TreeSet class implements the Set interface that uses a tree for storage. It inherits AbstractSet class and implements NavigableSet interface. The objects of TreeSet class are stored in ascending order.

The important points about Java TreeSet class are:

Contains unique elements only like HashSet.
Access and retrieval times are quiet fast.
Maintains ascending order
--------------------------------------

Java Map Interface
=================
A map contains values on the basis of key i.e. key and value pair. Each key and value pair is known as an entry. Map contains only unique keys.

Map is useful if you have to search, update or delete elements on the basis of key

------------------------------

Java HashMap class
==================
Java HashMap class hierarchy
Java HashMap class implements the map interface by using a hashtable. It inherits AbstractMap class and implements Map interface.

The important points about Java HashMap class are:

A HashMap contains values based on the key.
It contains only unique elements.
It may have one null key and multiple null values.
It maintains no order.



-------------------------------
Java Linked Hashmap Class
=================


Java LinkedHashMap class is Hash table and Linked list implementation of the Map interface, with predictable iteration order. 
The important points about Java LinkedHashMap class are:

A LinkedHashMap contains values based on the key.
It contains only unique elements.
It may have one null key and multiple null values.
It is same as HashMap instead maintains insertion order.


----------------------------------
Java TreeMap class
Java TreeMap class hierarchy
Java TreeMap class implements the Map interface by using a tree. It provides an efficient means of storing key/value pairs in sorted order.

The important points about Java TreeMap class are:

A TreeMap contains values based on the key. It implements the NavigableMap interface and extends AbstractMap class.
It contains only unique elements.
It cannot have null key but can have multiple null values.
It is same as HashMap instead maintains ascending order.