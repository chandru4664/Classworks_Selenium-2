 Logging
=========
Logging is the process of writing log messages during the execution of a program to a central place. 
This logging allows you to report and persist error and warning messages as well as info messages (e.g., runtime statistics)
 so that the messages can later be retrieved and analyzed.

The object which performs the logging in applications is typically just called Logger.

Logging in Java
===============

java.util.logging.Logger is the class used to log application messages in java logging API.

We can create java Logger with very simple one line code as;

Logger logger = Logger.getLogger(MyClass.class.getName());


Java Logging Levels
java.util.logging.Level defines the different levels of java logging. There are seven levels of logging in java.

SEVERE (highest)
WARNING
INFO
CONFIG
FINE
FINER
FINEST
There are two other logging levels, OFF that will turn off all logging and ALL that will log all the messages.

We can set the logger level using following code:

logger.setLevel(Level.FINE);

Java Logging Handlers
=======================
There are two default handlers provided by Java Logging API.

ConsoleHandler: This handler writes all the logging messages to console
FileHandler: This handler writes all the logging messages to file in the XML format.

Java Logging Formatters
Formatters are used to format the log messages. There are two available formatters in java logging API.

SimpleFormatter: This formatter generates text messages with basic information.
 ConsoleHandler uses this formatter class to print log messages to console.
XMLFormatter: This formatter generates XML message for the log, FileHandler uses XMLFormatter as a default formatter.
--------------------------------------------------------------------------------------------------------------------------------------------------------------
Internationalization and Localization in Java
================================================
 -----Abbreviated as I18N because there are total 18 characters between the first letter 'I' and the last letter 'N'.
	mechanism to create such an application that can be adapted to different languages and regions.

----Internationalization is one of the powerful concept of java if you are developing an application and want to display messages, 
currencies, date, time etc. according to the specific region or language.

Localization is also abbreviated as I10N because there are total 10 characters between the first letter 'L' and last letter 'N'. 
Localization is the mechanism to create such an application that can be adapted to a specific language and region by adding locale-specific text and component.

----------------------------------------------------------------------------------------------------------------------------------------------------------------

Understanding the culturally dependent data before starting internationalization
==================================================================================
Before starting the internationalization, Let's first understand what are the informations that differ from one region to another. 
There is the list of culturally dependent data:

Messages
Dates
Times
Numbers
Currencies
Measurements
Phone Numbers
Postal Addresses
Labels on GUI components etc.

--------------------------------------------------------------------------------------------------------------------------------------------------------------
Importance of Locale class in Internationalization
================================================
An object of Locale class represents a geographical or cultural region.
 This object can be used to get the locale specific information such as country name, language, variant etc.


There are three constructors of Locale class.They are as follows:

Locale(String language)
Locale(String language, String country)
Locale(String language, String country, String variant)
Commonly used methods of Locale class
There are given commonly used methods of Locale class.

public static Locale getDefault() 		it returns the 								instance of current Locale
public static Locale[] getAvailableLocales()	it returns an 							array of available locales.
public String getDisplayCountry() 		it returns the 						country name of this locale object.
public String getDisplayLanguage() 		it returns the 						language name of this locale object.
public String getDisplayVariant() 		it returns the 					variant code for this locale object.
public String getISO3Country() 	it returns the three 								letter abbreviation for 
						the current locale's country.
public String getISO3Language() 		it returns the three letter abbreviation for the current locale's language.
---------------------------------------------------------------------------------------------------------------------------------------------------------
Internationalizing Date (I18N with Date)
=======================================
The format of the dates differ from one region to another that is why we internationalize the dates.

We can internationalize the date by using the getDateInstance() method of the DateFormat class. It receives the locale object as a parameter and returns the instance of the DateFormat class.

-----------------------------------------------------------------------------------------------------------------------------------------------------
Internationalizing Time (I18N with Time)
======================================
The display format of the time differs from one region to another, so we need to internationalize the time.

For internationalizing the time, the DateFormat class provides some useful methods.

The getTimeInstance() method of the DateFormat class returns the instance of the DateFormat class for the specified style and locale.
------------------------------------------------------------------------------------------------------------------------------------------------------
Internationalizing Number (I18N with Number)
===========================================
The representation of the numbers differ from one locale to another. 
Internationalizing the numbers is good approach for the application that displays the informations according to the locales.
The NumberFormat class is used to format the number according to the specific locale. To get the instance of the NumberFormat class,
 we need to call either getInstance() or getNumberInstance() methods.
------------------------------------------------------------------------------------------------------------------------------------------------------
Internationalizing Currency (I18N with Currency)
=================================================

As we have internationalize the date, time and numbers, we can internationalize the currency also. 
The currency differs from one country to another so we need to internationalize the currency.

The NumberFormat class provides methods to format the currency according to the locale. 
The getCurrencyInstance() method of the NumberFormat class returns the instance of the NumberFormat class.
------------------------------------------------------------------------------------------------------------------------------------------------------------------
Java Regex
====================
The Java Regex or Regular Expression is an API to define pattern for searching or manipulating strings.

It is widely used to define constraint on strings such as password and email validation.
 After learning java regex tutorial, you will be able to test your own regular expressions by the Java Regex Tester Tool.
-------------------------------------------------------------------------------------------------------------------------------------------------------------------

Java Enum
===================
Enum in java is a data type that contains fixed set of constants.

It can be used for days of the week (SUNDAY, MONDAY, TUESDAY, WEDNESDAY, THURSDAY, FRIDAY and SATURDAY) , directions (NORTH, SOUTH, EAST and WEST) etc. The java enum constants are static and final implicitly. It is available from JDK 1.5.

Java Enums can be thought of as classes that have fixed set of constants.

Points to remember for Java Enum
enum improves type safety
enum can be easily used in switch
enum can be traversed
enum can have fields, constructors and methods
enum may implement many interfaces but cannot extend any class because it internally extends Enum class

==============================

What is the purpose of values() method in enum?
The java compiler internally adds the values() method when it creates an enum. The values() method returns an array containing all the values of the enum.

Internal code generated by the compiler for the above example of enum type
The java compiler internally creates a static and final class that extends the Enum class as shown in the below example:

public static final class EnumExample1$Season extends Enum  
{  
  private EnumExample1$Season(String s, int i)  
    {  
        super(s, i);  
    }  
  
    public static EnumExample1$Season[] values()  
    {  
        return (EnumExample1$Season[])$VALUES.clone();  
    }  
  
    public static EnumExample1$Season valueOf(String s)  
    {  
        return (EnumExample1$Season)Enum.valueOf(EnumExample1$Season, s);  
    }  
  
    public static final EnumExample1$Season WINTER;  
    public static final EnumExample1$Season SPRING;  
    public static final EnumExample1$Season SUMMER;  
    public static final EnumExample1$Season FALL;  
    private static final EnumExample1$Season $VALUES[];  
  
    static   
    {  
        WINTER = new EnumExample1$Season("WINTER", 0);  
        SPRING = new EnumExample1$Season("SPRING", 1);  
        SUMMER = new EnumExample1$Season("SUMMER", 2);  
        FALL = new EnumExample1$Season("FALL", 3);  
        $VALUES = (new EnumExample1$Season[] {  
            WINTER, SPRING, SUMMER, FALL  
        });  
    }  
  
}  
=========================================================================================

Constructor of enum type is private. If you don't declare private compiler internally creates private constructor.
Can we create the instance of enum by new keyword?
No, because it contains private constructors only.
Can we have abstract method in enum?
Yes, ofcourse! we can have abstract methods and can provide the implementation of these methods.








