Java I/O

Java I/O (Input and Output) is used to process the input and produce the output.

Java uses the concept of stream to make I/O operation fast.
 The java.io package contains all the classes required for input and output operations.

We can perform file handling in java by Java I/O API.

Stream
A stream is a sequence of data.In Java a stream is composed of bytes. 
It's called a stream because it is like a stream of water that continues to flow.

In java, 3 streams are created for us automatically. All these streams are attached with console.

1) System.out: standard output stream

2) System.in: standard input stream

3) System.err: standard error stream

System.out.println("simple message");  
System.err.println("error message");  

Java FileInputStream Class
---------------------------
Java FileInputStream class obtains input bytes from a file. 
It is used for reading byte-oriented data (streams of raw bytes) such as image data, audio, video etc. 

Java BufferedOutputStream Class
========================
used for buffering an output stream.
 It internally uses buffer to store data.
 It adds more efficiency than to write data directly into a stream. So, it makes the performance fast.

Java BufferedInputStream Class
============================
used to read information from stream. 
It internally uses buffer mechanism to make the performance fast.

The important points about BufferedInputStream are:

When the bytes from the stream are skipped or read, the internal buffer automatically refilled from the contained input stream, many bytes at a time.
When a BufferedInputStream is created, an internal buffer array is created.
========================================
Comparable vs comparator
----------------------------
Comparable is meant for objects with natural ordering which means the object itself must know how it is to be ordered. 
For example Roll Numbers of students. Whereas, Comparator interface sorting is done through a separate class.
Logically, Comparable interface compares “this” reference with the object specified and Comparator in Java compares two different class objects provided.
If any class implements Comparable interface in Java then collection of that object either List or Array can be sorted automatically by using Collections.sort() or Arrays.sort() method and objects will be sorted based on there natural order defined by CompareTo method.

To summarize, if sorting of objects needs to be based on natural order then use Comparable whereas if you sorting needs to be done on attributes of different objects, then use Comparator in Java.

================================================
Serialization
=================
Serialization is a mechanism of converting the state of an object into a byte stream. 

Deserialization is the reverse process where the byte stream is used to recreate the actual Java object in memory.
 
This mechanism is used to persist the object.
Advantages of Serialization
1. To save/persist state of an object.
2. To travel an object across a network.

Points to remember

1. If a parent class has implemented Serializable interface then child class doesn’t need to implement it but vice-versa is not true.

2. Only non-static data members are saved via Serialization process.

3. Static data members and transient data members are not saved via Serialization process.So, if you don’t want to save value of a non-static data member then make it transient.

4. Constructor of object is never called when an object is deserialized.

5. Associated objects must be implementing Serializable interface.

Example :

class A implements Serializable{

// B also implements Serializable
// interface.
B ob=new B();  
}

-----------------------------------------------------

Why so we use SerialVersionUID : SerialVersionUID is used to ensure that during deserialization the same class (that was used during serialize process) is loaded.

Example: Suppose a person who is in UK and another person who is in India, both are going to perform serialization and deserialization respectively. In this case to authenticate that the receiver who is in India is the authenticated person, JVM creates an Unique ID which is known as SerialVersionUID.



